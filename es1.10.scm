(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

; Simplify with positive integer values of n
(define (f n) (A 0 n))
(define (f n)
  (cond ((= n 0) 0)
        ((= 0 0) (* 2 n))
        ((= n 1) 2)
        (else (A (- 0 1)
                 (A 0 (- n 1))))))
(define (f n)
  (cond ((= n 0) 0)
        ((= 0 0) (* 2 n))))
(define (f n)
  (cond (true (* 2 n))))
(define (f n) (* 2 n))
; 2*n

(define (g n) (A 1 n))
(define (g n) 
  (cond ((= n 0) 0)
        ((= 1 0) (* 2 n))
        ((= n 1) 2)
        (else (A (- 1 1)
                 (A 1 (- n 1))))))
(define (g n) 
  (cond ((= n 1) 2)
        (else (A (- 1 1)
                 (A 1 (- n 1))))))
(define (g n) 
  (cond ((= n 1) 2)
        (else (A 0
                 (A 1 (- n 1))))))
(define (g n) 
  (cond ((= n 1) 2)
        (else (f (A 1 (- n 1))))))
(define (g n) 
  (cond ((= n 1) 2)
        (else (* 2 (A 1 (- n 1))))))
(define (g n) 
  (cond ((= n 1) 2)
        (else (* 2 (g (- n 1))))))
; 2^n

(define (h n) 
  (cond ((= n 0) 0)
        ((= 2 0) (* 2 n))
        ((= n 1) 2)
        (else (A (- 2 1)
                 (A 2 (- n 1))))))
(define (h n) 
  (cond ((= n 1) 2)
        (else (A 1 
                 (A 2 (- n 1))))))
(define (h n) 
  (cond ((= n 1) 2)
        (else (A 1 
                 (h (- n 1))))))
(define (h n) 
  (cond ((= n 1) 2)
        (else (pow 2 
                   (h (- n 1))))))
; 2^(2^(2^...))) n times
