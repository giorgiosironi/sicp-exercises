(define (accumulate-recur combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate-recur combiner null-value term (next a) next b))))
(define (accumulate-iter combiner null-value term a next b)
  (define (iter i result)
    (if (> i b)
        result     
        (iter (next i)
              (combiner (term i)
                        result))))
  (iter a null-value))
(define (product accumulate term a next b)
  (define (times x y)
    (* x y))
  (accumulate times 1 term a next b))
(define (factorial-recur n)
  (define (identity x) x)
  (define (inc x) (+ 1 x))
  (product accumulate-recur identity 1 inc n))
(define (factorial-iter n)
  (define (identity x) x)
  (define (inc x) (+ 1 x))
  (product accumulate-iter identity 1 inc n))
