; from 1.22
(define (prime? n)
  (define (divides? a b)
    (= (remainder b a) 0))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (smallest-divisor n)
    (find-divisor n 2))
  (= n (smallest-divisor n)))
; new stuff
(define (filtered-accumulate filter combiner null-value term a next b)
  (define (maybe-value i)
    (if (filter i)
        i
        null-value))
  (define (iter i result)
    (if (> i b)
        result     
        (iter (next i)
              (combiner (term (maybe-value i))
                        result))))
  (iter a null-value))
(define (sum-squares-prime-numbers a b)
  (define (inc x) (+ 1 x))
  (define (sum x y) (+ x y))
  (define (square x) (* x x))
  (filtered-accumulate prime? sum 0 square a inc b))
(define (product-positive-integers-less-than-and-prime-to n)
  (define (inc x) (+ 1 x))
  (define (identity x) x)
  (define (product x y) (* x y))
  (define (gcd a b)
    (if (= b 0)
      a
      (gcd b (remainder a b))))
  (define (prime-with x) (= 1
                            (gcd x n)))
  (filtered-accumulate prime-with product 1 identity 1 inc (- n 1)))
