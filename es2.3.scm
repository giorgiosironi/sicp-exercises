; from 2.2
(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))
(define (make-segment start end)
  (cons start end))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (segment-length segment)
  (let ((a (start-segment segment))
        (b (end-segment segment)))
    (sqrt (+ (square (- (x-point a)
                        (x-point b)))
             (square (- (y-point a)
                        (y-point b)))))))
(define (rectangle one-corner opposite-corner)
  (cons one-corner opposite-corner))
(define (one-corner rectangle)
  (car rectangle))
(define (opposite-corner rectangle)
  (cdr rectangle))
(define (perimeter rectangle)
  (* 2 (+ (base rectangle)
          (height rectangle))))
(define (area rectangle)
  (* (base rectangle)
     (height rectangle)))
(define (base rectangle)
  (let ((lower-y (min (y-point (one-corner rectangle))
                      (y-point (opposite-corner rectangle)))))
    (segment-length (make-segment (make-point (x-point (one-corner rectangle))
                                  lower-y)
                                  (make-point (x-point (opposite-corner rectangle))
                                  lower-y)))))
(define (height rectangle)
  (let ((lower-x (min (x-point (one-corner rectangle))
                      (x-point (opposite-corner rectangle)))))
    (segment-length (make-segment (make-point lower-x
                                             (y-point (one-corner rectangle)))
                                  (make-point lower-x
                                             (y-point (opposite-corner rectangle)))))))

(define (alternate-rectangle lowest-corner base height)
  (cons (lower-corner)
        (cons base height)))
(define (alternate-height alternate-rectangle)
  (cdr (car alternate-rectangle)))
(define (alternate-base alternate-rectangle)
  (car (car alternate-rectangle)))
