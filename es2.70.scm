; primitives
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
    (list (symbol-leaf tree))
    (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
    (weight-leaf tree)
    (cadddr tree)))
; construction of a Huffman tree
(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))
(define (make-leaf-set pairs)
  (if (null? pairs)
    '()
    (let ((pair (car pairs)))
      (adjoin-set (make-leaf (car pair) ; symbol
                             (cadr pair)) ; frequency
                  (make-leaf-set (cdr pairs))))))
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
(define (successive-merge tree-set)
  (if (= 1 (length tree-set))
      (car tree-set)
      (let ((first (car tree-set))
            (second (cadr tree-set))
            (rest-of-set (cddr tree-set)))
        (successive-merge (adjoin-set (make-code-tree first
                                                      second)
                                      rest-of-set)))))
; encoding
(define (encode message tree)
  (if (null? message)
    '()
    (append (encode-symbol (car message) tree)
            (encode (cdr message) tree))))
(define (contains-symbol symbol tree)
  (not (eq? #f
            (member symbol (symbols tree)))))
(define (encode-symbol symbol tree)
  (if (not (contains-symbol symbol tree))
      (error "Tree does not contain symbol -- ENCODE-SYMBOL")
      (if (leaf? tree)
          '()
          (let ((left (left-branch tree))
                (right (right-branch tree)))
            (cond ((contains-symbol symbol left)
                   (cons 0 (encode-symbol symbol left)))
                  ((contains-symbol symbol right)
                   (cons 1 (encode-symbol symbol right))))))))
(define tree-1950s-songs (generate-huffman-tree '((A 2)
                                                  (BOOM 1)
                                                  (GET 2)
                                                  (JOB 2)
                                                  (NA 16)
                                                  (SHA 3)
                                                  (YIP 9)
                                                  (WAH 1))))
(define sample-message '(GET A JOB SHA NA NA NA NA NA NA NA NA GET A JOB SHA NA NA NA NA NA NA NA NA WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP SHA BOOM))
(define encoded-message (encode sample-message tree-1950s-songs))
; 84 bit (84 is the lenght of the resulting list)
; if we used fixed-length we would have 3 bits for each symbol
; given the length of sample-message is 36, we would need 108 bits
