a. We are dispatching basing on the operator contained in the expression, which must be a pair whose `car` is an operator. We can't assimilate numbers or variables (represented as symbols) because they're not pairs and `operator` would fail.

b. Without using additional tags since the operators are already stored in the expressions:
(define (deriv-sum operands var)
  (make-sum (deriv (car operands) var)
            (deriv (cadr operands) var)))
(define (deriv-product operands var)
  (let ((multiplier (car operands))
        (multiplicand (cadr operands)))
    (make-sum
      (make-product multiplier
                    (deriv multiplicand var))
      (make-product (deriv multiplier var)
                    multiplicand))))
(put 'deriv '+ 'deriv-sum)
(put 'deriv '* 'deriv-product)

c. We need to call put as for the previous ones:
(define (deriv-exp operands var)
  (let ((base (car operands))
        (exponent (cadr operands)))
    (make-product 
      (make-product exponent
                    (make-exponentiation base
                                         (- exponent 1)))
      (deriv base
             var)))
(put 'deriv '** 'deriv-exp)

d. All the put calls become like:
(put '** 'deriv 'deriv-exp)
The order of the argument passed to deriv-something is still operands and var so further code should not change.
