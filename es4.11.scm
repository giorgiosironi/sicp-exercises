; library
(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
    (cons (make-frame vars vals) base-env)
    (if (< (length vars) (length vals))
      (error "Too many arguments supplied" vars vals)
      (error "Too few arguments supplied" vars vals))))
; exercise
(define (make-binding var val)
  (cons var val))
(define (binding-var binding)
  (car binding))
(define (binding-val binding)
  (cdr binding))
(define (binding-set! binding val)
  (set-cdr! binding val))
(define (make-frame variables values)
  (cons 'frame (map make-binding variables values)))
(define (frame-bindings frame)
  (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-cdr! frame (cons (make-binding var val)
                        (frame-bindings frame))))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? var (binding-var (car bindings)))
             (binding-val (car bindings)))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
        (scan (frame-bindings frame)))))
  (env-loop env))
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? var (binding-var (car bindings)))
             (binding-set! (car bindings) val))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable -- SET!" var)
      (let ((frame (first-frame env)))
        (scan (frame-bindings frame)))))
  (env-loop env))
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan bindings)
      (cond ((null? bindings)
             (add-binding-to-frame! var val frame))
            ((eq? var (binding-var (car bindings)))
             (binding-set! (car bindings) val))
            (else (scan (cdr bindings)))))
    (scan (frame-bindings frame))))
; testing
(define f (make-frame '(a b) '(23 42)))
(add-binding-to-frame! 'c 64 f)
(display f)
(newline)
; should be 23 128 256 512 1024
(define father-env (extend-environment '(a b c) '(23 42 64) the-empty-environment))
(define child-env (extend-environment '(c d) '(128 256) father-env))
(display (lookup-variable-value 'a child-env))
(newline)
(display (lookup-variable-value 'c child-env))
(newline)
(display (lookup-variable-value 'd child-env))
(newline)
(set-variable-value! 'a 512 child-env)
(display (lookup-variable-value 'a father-env))
(newline)
(define-variable! 'e 1024 father-env)
(display (lookup-variable-value 'e child-env))
(newline)
