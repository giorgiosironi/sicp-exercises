; library
(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
    (cons (make-frame vars vals) base-env)
    (if (< (length vars) (length vals))
      (error "Too many arguments supplied" vars vals)
      (error "Too few arguments supplied" vars vals))))
(define (make-binding var val)
  (cons var val))
(define (binding-var binding)
  (car binding))
(define (binding-val binding)
  (cdr binding))
(define (binding-set! binding val)
  (set-cdr! binding val))
(define (make-frame variables values)
  (cons 'frame (map make-binding variables values)))
(define (frame-bindings frame)
  (cdr frame))
; exercise
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? var (binding-var (car bindings)))
             (let ((val (binding-val (car bindings))))
               (if (eq? val '*unassigned)
                   (error "UNASSIGNED VALUE" var)
                   val)))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
        (scan (frame-bindings frame)))))
  (env-loop env))
(define an-environment (extend-environment '(foo) '(*unassigned) the-empty-environment))

