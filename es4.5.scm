; library
(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      #f))
(define
  (begin? exp) (tagged-list? exp 'begin))
(define
  (begin-actions exp) (cdr exp))
(define
  (last-exp? seq) (null? (cdr seq)))
(define
  (first-exp seq) (car seq))
(define
  (rest-exps seq) (cdr seq))
(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))
(define (make-begin seq) (cons 'begin seq))
(define (true? exp)
  (if exp #t #f))
(define (eval-if exp env)
  (if (true? (eval (if-predicate exp) env))
    (eval (if-consequent exp) env)
    (eval (if-alternative exp) env)))
(define (if? exp) (tagged-list? exp 'if))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
    (cadddr exp)
    'false))
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))
(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
(define (cond-predicate clause) (car clause))
(define (cond-actions clause) (cdr clause))
(define (cond->if exp)
  (if (cond? exp)
      (expand-clauses (cond-clauses exp))
      (error "Not a cond -- COND->IF" exp)))
(define (expand-clauses clauses)
  (display "Clauses: ")
  (display clauses)
  (newline)
  (if (null? clauses)
    'false
    ; no else clause
    (let ((first (car clauses))
          (rest (cdr clauses)))
      (if (cond-else-clause? first)
        (if (null? rest)
          (sequence->exp (cond-actions first))
          (error "ELSE clause isn't last -- COND->IF"
                 clauses))
        (make-if (cond-predicate first)(sequence->exp (cond-actions first))
                 (expand-clauses rest))))))
(define (self-evaluating? exp)
  (cond ((number? exp) #t)
        ((string? exp) #t)
        ((boolean? exp) #t)
        (else false)))
(define (cond? exp) (tagged-list? exp 'cond))
(define (application? exp) (pair? exp))
; stubbed
;(define (eval exp env)
;  (cond ((self-evaluating? exp)
;         exp)
;        ((if? exp)
;         (eval-if exp env))
;        ((cond? exp)
;         (eval-if (cond->if exp) env))
;        ((application? exp)
;         (begin (display "APPLYING ")
;                (display exp)
;                (newline)))
;        (else
;          (error "Unknown expression type -- EVAL" exp))))
; exercise: modifications to cond
(define (cond-arrow-clause? clause)
  (eq? '=> (cadr clause)))
(define (expand-clauses clauses)
  (if (null? clauses)
    'false
    ; no else clause
    (let ((first (car clauses))
          (rest (cdr clauses)))
      (if (cond-arrow-clause? first)
          (let ((test (cond-predicate first)))
              (make-if test
                       (list
                         (cadr (cond-actions first))
                         test)
                       (expand-clauses rest)))
          (if (cond-else-clause? first)
            (if (null? rest)
              (sequence->exp (cond-actions first))
              (error "ELSE clause isn't last -- COND->IF"
                     clauses))
            (make-if (cond-predicate first)
                     (sequence->exp (cond-actions first))
                     (expand-clauses rest)))))))
;(display (eval '(cond (#t (some-ok-procedure)) (else 10)) 'some-env))
;(display (eval '(cond ((if #t 42 23) => some-ok-procedure) (else 10)) 'some-env))
;(display (eval '(cond ((if #f 42 #f) => some-ko-procedure) (else "ok")) 'some-env))
;(newline)
