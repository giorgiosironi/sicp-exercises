; library
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))
; exercise
(define (make-application proc parameters)
  (cons proc parameters))
(define (let-vars exp)
  (map (lambda (binding) (car binding))
       (cadr exp)))
(define (let-exps exp)
  (map (lambda (binding) (cadr binding))
       (cadr exp)))
(define (let-body exp)
  (cddr exp))
(define (let->combination exp)
  (make-application (make-lambda (let-vars exp)
                                 (let-body exp))
                    (let-exps exp)))
(display (let->combination '(let ((x 3) (y 2)) (+ x y))))
(newline)
; the clause for eval would be (let? exp (eval (let->combination exp) env))
