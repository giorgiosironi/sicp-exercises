(load "es4.5.scm")
(load "es4.13.scm")
(load "es4.22.scm")
(load "chapter5.2.scm")
(load "chapter5.4.scm")

(define eceval (make-machine '(exp env val proc argl continue unev)
                                     (list (list 'self-evaluating? self-evaluating?)
                                           (list 'variable? variable?)
                                           (list 'quoted? quoted?)
                                           (list 'assignment? assignment?)
                                           (list 'definition? definition?)
                                           (list 'if? if?)
                                           (list 'lambda? lambda?)
                                           (list 'begin? begin?)
                                           (list 'application? application?)
                                           (list 'lookup-variable-value lookup-variable-value)
                                           (list 'text-of-quotation text-of-quotation)
                                           (list 'lambda-parameters lambda-parameters)
                                           (list 'lambda-body lambda-body)
                                           (list 'make-procedure make-procedure)
                                           (list 'operands operands)
                                           (list 'operator operator)
                                           (list 'empty-arglist empty-arglist)
                                           (list 'no-operands? no-operands?)
                                           (list 'first-operand first-operand)
                                           (list 'last-operand? last-operand?)
                                           (list 'rest-operands rest-operands)
                                           (list 'adjoin-arg adjoin-arg)
                                           (list 'primitive-procedure? primitive-procedure?)
                                           (list 'compound-procedure? compound-procedure?)
                                           (list 'apply-primitive-procedure apply-primitive-procedure)
                                           (list 'procedure-parameters procedure-parameters)
                                           (list 'procedure-environment procedure-environment)
                                           (list 'procedure-body procedure-body)
                                           (list 'extend-environment extend-environment)
                                           (list 'begin-actions begin-actions)
                                           (list 'first-exp first-exp)
                                           (list 'last-exp? last-exp?)
                                           (list 'rest-exps rest-exps)
                                           (list 'if-predicate if-predicate)
                                           (list 'true? true?)
                                           (list 'if-alternative if-alternative)
                                           (list 'if-consequent if-consequent)
                                           (list 'assignment-variable assignment-variable)
                                           (list 'assignment-value assignment-value)
                                           (list 'set-variable-value! set-variable-value!)
                                           (list 'definition-variable definition-variable)
                                           (list 'definition-value definition-value)
                                           (list 'define-variable! define-variable!)
                                           (list 'user-print user-print)
                                           (list 'prompt-for-input prompt-for-input)
                                           (list 'read read)
                                           (list 'get-global-environment get-global-environment)
                                           (list 'announce-output announce-output)
                                           (list 'primitive-procedures primitive-procedures)
                                           ; add everything missing...
                                           (list 'dump
                                                 (lambda (x)
                                                   (display x)
                                                   (newline))))
                                     explicit-control-evaluator))
;(set-register-contents! eceval 'env the-empty-environment)
(start eceval)
;(display "Evaluation result: ")
;(display (get-register-contents append!-machine 'val))
;(newline)
