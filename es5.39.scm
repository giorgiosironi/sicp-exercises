(load "chapter5.5.scm")
(define (navigate-frames lexical-address runtime-environment on-frame)
  (let ((frame-distance (car lexical-address))
        (variable-distance (cadr lexical-address)))
    (if (eq? frame-distance 0)
      (on-frame (first-frame runtime-environment) variable-distance)
      (navigate-frames (list (- frame-distance 1)
                                    variable-distance)
                       (enclosing-environment runtime-environment)
                       on-frame))))
(define (lexical-address-lookup lexical-address runtime-environment)
  (define (lookup-in-frame frame variable-distance)
    (define (nth n sequence)
      (car (drop sequence n)))
    (let ((values (frame-values frame)))
      (let ((value (nth variable-distance values)))
        (if (eq? 'unassigned value)
          (error "The variable lexically looked up is unassigned" lexical-address)
          value))))
  (navigate-frames lexical-address runtime-environment lookup-in-frame))
(define (lexical-address-set! lexical-address runtime-environment value)
  (define (set-in-frame! frame variable-distance)
    (set-variable! (frame-values frame) variable-distance))
  (define (set-variable! values variable-distance)
    (if (eq? variable-distance 0)
      (set-car! values value)
      (set-variable! (cdr values)
                     (- variable-distance 1))))
  (navigate-frames lexical-address runtime-environment set-in-frame!))
; testing it
(define sub (extend-environment '(a b) '(42 43) the-empty-environment))
(define subsub (extend-environment '(a c) '(44 45) sub))
(define subsubsub (extend-environment '(d e) '(46 47) subsub))
(display (lexical-address-lookup '(2 0) subsubsub)) ; 42
(newline)
(display (lexical-address-lookup '(1 1) subsub)) ; 43
(newline)
(display (lexical-address-lookup '(0 0) subsub)) ; 44
(newline)
(display (lexical-address-lookup '(0 1) subsub)) ; 45
(newline)
(lexical-address-set! '(2 0) subsubsub "answer")
(display (lexical-address-lookup '(2 0) subsubsub)) ; "answer"
(newline)
