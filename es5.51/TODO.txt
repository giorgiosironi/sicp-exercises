General refactoring:
easy:
++ lookup_register or similar in all Machine::make_*() that lookup register names
-- use cerr instead of cout for all debugging; only official print statements should use cout
--- maybe a logging function?
-- improve Environment::toString() to show values
-- since Environments always have one basic frame (if that's true), EnvironmentTest can be simplified not to create that first empty frame
-- set of assertions for checking parameters of Operations
- hard
-- Ctrl+D should not crash
-- implement == for Value
-- macros for creating ConsMethodOperation::car() and similar?
-- assertions should use raise (or even some assert construct)
-- functional tests? execute a whole program
- boring:
-- extract remaining stuff from main.cpp
-- remove referenced to std:: by using `use namespace std`
-- all methods should be camel case
-- rename all tests inside TEST() macros to ConsTest and similar
-- is-operation can be operation? since it's just a string in the lookup table
- anything else
-- ask someone why idiomatic C++ is `Stack *stack` instead of `Stack* stack`

branch:
- implement Instruction::toString()

ev-application:
- translate assembly code
- DEPENDENCY: ev-definition
- operations
++ application?
+++ IsInstanceOf<Cons> : Operation
++ operands
++ operator
++ empty-arglist
+++ new Constant(Value*)
++ no-operands?
++ first-operand
++ last-operand?
++ adjoin-arg
+++ AdjoinArg Operation
+++ which uses List::append on second argument
+++ which implies common interface List between Cons and Nil
--- many (static methods) in Cons can be ported onto List
++ rest-operands
++ primitive-procedure?
-- compound-procedure?
++ apply-primitive-procedure
+++ assertions for number of elements, or their type: assert.h
+++ virtual PrimitiveProcedure
+++ implement PrimitivePlus
+++ implement ApplyPrimitiveProcedure
+++ add + as a primitive procedure
--- move other Operations outside of Machine.cpp
+++ acceptance test: (+ 1 2)
-- procedure-parameters
-- procedure-environment
-- extend-environment
-- procedure-body

ev-definition:
- translate assembly code
- required operations
-- DefinitionVariable should use List, not Cons => List::cadr()


References:
- chapter4.1.scm: application?
- chapter5.2.scm: make-machine, make-new-machine
- chapter5.4.scm: explicit-control-evaluator, operations
- chapter5.scm: assignment-variable and many basic operations
- es4.13.scm: environments, frames, variables
