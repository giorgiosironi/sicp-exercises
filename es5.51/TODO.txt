General refactoring:
easy:
++ lookup_register or similar in all Machine::make_*() that lookup register names
-- use cerr instead of cout for all debugging; only official print statements should use cout
--- maybe a logging function?
-- set of assertions for checking parameters of Operations
- hard
-- Ctrl+D should not crash
-- implement == for Value
-- macros for creating ConsMethodOperation::car() and similar?
-- assertions should use raise (or even some assert construct)
-- functional tests? execute a whole program
- boring:
-- extract remaining stuff from main.cpp
-- remove referenced to std:: by using `use namespace std`
-- all methods should be camel case
- anything else
-- ask someone why idiomatic C++ is `Stack *stack` instead of `Stack* stack`

ev-variable
+ implement Frame: pair of variable names (symbols?) and values
+ implement Environment: a sequence of Frames where the topmost is the one that wins and if a variable is not found it falls back to other Frames
+ implement Environment::extend()
++ Environment can return a new Environment with one more frame
++ Environment can lookup a variable in any of its frames
++ Environment starts looking up from the last frame
- implement any accessor method necessary on Frame and Environment
++ Environment::set(name, value)
++ SetVariableValue(Operation)


branch:
- implement Instruction::toString()

References:
- chapter5.2.scm: make-machine, make-new-machine
- chapter5.4.scm: explicit-control-evaluator, operations
- chapter5.scm: assignment-variable and many basic operations
- es4.13.scm: environments, frames, variables
