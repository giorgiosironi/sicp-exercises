- perform has to have access to:
    (define (make-perform inst machine labels operations pc)

- extract remaining stuff from main.cpp
+ make lists display as list instead of (a . (b . NIL))
- remove referenced to std:: by using `use namespace std`

prompt-for-input
+ also a way to pass arguments to operations
+ arguments arrive to Perform
- evaluate them (just the `const` type)
-- but they need to be evaluated in multiple places, like `assign` and `perform`
-- we will extract that later, a private method is ok for now
+ pass them to the Operation as std:vector<Value*>

read:
- first implement Read but use a (perform (op read)) and ignore the result
- then implement assign and use (assign (op read))
- this will read the input as a String (or std::string maybe), but we need to transform it
-- parse it? any kind of s-expression could be passed there

the-global-environment:
+ implement Frame: pair of variable names (symbols?) and values
+ implement Environment: a sequence of Frames where the topmost is the one that wins and if a variable is not found it falls back to other Frames
- implement Environment::extend()

assign to continue:
+ assign will start to support multiple types of stuff, not just operation
+ ...but also (label ...)
+ that will need a Label: public Value
+ assign should work as-is once this returns a Value
- maybe remove Machine and other not needed stuff from this Instruction?

test:
+ need a Machine::make_test
+ and a Test : Instruction class
- will look up the Operation and pass it in the Test constructor
- will look up the Register and pass it in the Test constructor
- need also to be passed the flag Register to store the result

References:
- chapter5.2.scm: make-machine, make-new-machine
- chapter5.4.scm: explicit-control-evaluator, operations
- es4.13.scm: environments, frames, variables
